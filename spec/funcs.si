binary (a int, b int) := do
    let t := (unary a) + b in
    t;
end;
unary (a int) int = a;
nilary () () = ();

identity{T}(input T) T = input;

call_binary () int = binary (2, 5);

expr to_int{T::bool}(value T) int = if value then 1 else 0;
expr to_int{T::int}(value T) int = value;
expr to_int{T::()}(value T) int = 0;

# This succeeds since it's parametric
calls_to_int{T}(value T) int = to_int{T} value;

# This also succeeds since type has valid boundary
returns_1() int = calls_to_int{bool} true;

is_zero(i int) := i == 0;

is_space(chr char) :=
    chr == ' '
  | chr == '\f'
  | chr == '\n'
  | chr == '\r'
  | chr == '\t'
  | chr == '\v'
;