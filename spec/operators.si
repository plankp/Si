validate_binary_int_ops() () = do
    let add_ii int = 1 + 2 in
    let sub_ii int = 1 - 2 in
    let mul_ii int = 1 * 2 in
    let div_ii int = 1 / 2 in
    let and_ii int = 1 & 2 in
    let xor_ii int = 1 ^ 2 in
    let or_ii int = 1 | 2 in
    let not int = !1 in
    let neg int = -1 in
    let pos int = +1 in

    let cmp_ii int = 1 <=> 2 in
    let lt bool = 1 < 2 in
    let le bool = 1 <= 2 in
    let ge bool = 1 >= 2 in
    let gt bool = 1 > 2 in
    let eq bool = 1 == 2 in
    let ne bool = 1 != 2 in
    ();
end;

validate_binary_double_ops() () = do
    let add_dd double = 1.0 + 2.0 in
    let sub_dd double = 1.0 - 2.0 in
    let mul_dd double = 1.0 * 2.0 in
    let div_dd double = 1.0 / 2.0 in
    let neg double = -1.0 in
    let pos double = +1.0 in

    let cmp_dd int = 1.0 <=> 2.0 in
    let lt bool = 1.0 < 2.0 in
    let le bool = 1.0 <= 2.0 in
    let ge bool = 1.0 >= 2.0 in
    let gt bool = 1.0 > 2.0 in
    let eq bool = 1.0 == 2.0 in
    let ne bool = 1.0 != 2.0 in
    ();
end;

validate_int_double_ops() () = do
    let add_id double = 1 + 2.0 in
    let sub_id double = 1 - 2.0 in
    let mul_id double = 1 * 2.0 in
    let div_id double = 1 / 2.0 in

    let cmp_id int = 1 <=> 2.0 in
    let lt bool = 1 < 2.0 in
    let le bool = 1 <= 2.0 in
    let ge bool = 1 >= 2.0 in
    let gt bool = 1 > 2.0 in
    let eq bool = 1 == 2.0 in
    let ne bool = 1 != 2.0 in
    ();
end;

validate_double_int_ops() () = do
    let add_di double = 1.0 + 2 in
    let sub_di double = 1.0 - 2 in
    let mul_di double = 1.0 * 2 in
    let div_di double = 1.0 / 2 in

    let cmp_di int = 1.0 <=> 2 in
    let lt bool = 1.0 < 2 in
    let le bool = 1.0 <= 2 in
    let ge bool = 1.0 >= 2 in
    let gt bool = 1.0 > 2 in
    let eq bool = 1.0 == 2 in
    let ne bool = 1.0 != 2 in
    ();
end;

validate_binary_bool_ops() () = do
    let eq bool = true == false in
    let ne bool = true != false in
    let and_zz bool = true & false in
    let xor_zz bool = true ^ false in
    let or_zz bool = true | false in
    let not bool = !true in
    ();
end;

validate_binary_unit_ops() () = do
    let eq bool = () == () in
    let ne bool = () != () in
    ();
end;

validate_binary_char_ops() () = do
    let cmp_cc int = 'a' <=> '"' in
    let lt bool = '\a' < '\b' in
    let le bool = '\f' <= '\n' in
    let ge bool = '\r' >= '\t' in
    let gt bool = '\v' > '\"' in
    let eq bool = '\'' == '\\' in
    let ne bool = '\u1234' != '\U00001234' in
    ();
end;

validate_binary_string_ops() () = do
    let cmp_cc int = "a" <=> "'" in
    let lt bool = "\a" < "\b" in
    let le bool = "\f" <= "\n" in
    let ge bool = "\r" >= "\t" in
    let gt bool = "\v" > "\"" in
    let eq bool = "\'" == "\\" in
    let ne bool = "\u1234" != "\U00030050" in
    ();
end;
